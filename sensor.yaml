#### TIME/DATE ##################################
- platform: time_date
  display_options:
      - 'time'
      - 'date'
      - 'date_time'
      - 'date_time_iso'
- platform: worldclock
  time_zone: Etc/UTC
  name: 'Time UTC'
- platform: worldclock
  time_zone: America/New_York
  name: 'Time New York'
- platform: worldclock
  time_zone: Europe/Madrid
  name: 'Time Barcelona'
- platform: worldclock
  time_zone: Australia/Brisbane
  name: 'Time Brisbane'

# Weather prediction
- platform: weather_data
# thomasvs: added
  name: Weather tomorrow
  forecast: 24
  monitored_conditions:
    - symbol
    - temperature
    - humidity
    - fog
    - pressure
    - precipitation
    - windSpeed
    - cloudiness
- platform: weather_data
  name: Weather in 6h
  forecast: 6
  monitored_conditions:
    - symbol
    - temperature
    - humidity
    - fog
    - pressure
    - precipitation
    - windSpeed
    - cloudiness

- platform: weather_data
  name: Weather now
  monitored_conditions:
    - symbol
    - temperature
    - humidity
    - fog
    - pressure
    - precipitation
    - windSpeed
    - cloudiness


# thomasvs: wireless tag sensors
- platform: wirelesstag
  monitored_conditions:
    - temperature
    - humidity

# thomasvs: template sensor for desired bedroom night blinds state
- platform: template
  sensors:
    main_bedroom_night_blinds:
      friendly_name: "Main Bedroom Night Blinds"
      value_template: >-
        {% if is_state("binary_sensor.main_bedroom_window", "off") %}
          Closed
        {% elif states('sensor.pirateweather_home_wind_speed_0h')|float > states('input_number.max_wind_speed_closed_blinds')|float %}
          Partly
        {% elif states('sensor.pirateweather_home_wind_speed_8h')|float > states('input_number.max_wind_speed_closed_blinds')|float %}
          Partly
        {% else %}
          Closed
        {% endif %}
      attribute_templates:
        reason: >-
          {% if is_state("binary_sensor.main_bedroom_window", "off") %}
            Closed: Window Closed
          {% elif states('sensor.pirateweather_home_wind_speed_0h')|float > states('input_number.max_wind_speed_closed_blinds')|float %}
            Partly: Wind Speed Now High
          {% elif states('sensor.pirateweather_home_wind_speed_8h')|float > states('input_number.max_wind_speed_closed_blinds')|float %}
            Partly: Wind Speed 6h High
          {% else %}
            Closed: Wind Speed Low
          {% endif %}
    guest_bedroom_night_blinds:
      friendly_name: "Guest Bedroom Night Blinds"
      value_template: >-
        {% if is_state("binary_sensor.guest_bedroom_window", "off") %}
          Closed
        {% elif states('sensor.pirateweather_home_wind_speed_0h')|float > states('input_number.max_wind_speed_closed_blinds')|float %}
          Partly
        {% elif states('sensor.pirateweather_home_wind_speed_8h')|float > states('input_number.max_wind_speed_closed_blinds')|float %}
          Partly
        {% else %}
          Closed
        {% endif %}
      attribute_templates:
        reason: >-
          {% if is_state("binary_sensor.guest_bedroom_window", "off") %}
            Closed: Window Closed
          {% elif states('sensor.pirateweather_home_wind_speed_0h')|float > states('input_number.max_wind_speed_closed_blinds')|float %}
            Partly: Wind Speed Now High
          {% elif states('sensor.pirateweather_home_wind_speed_8h')|float > states('input_number.max_wind_speed_closed_blinds')|float %}
            Partly: Wind Speed 6h High
          {% else %}
            Closed: Wind Speed Low
          {% endif %}

# thomasvs: plant sensors
#- platform: mitemp_bt
  #  hci_interface:
#   - 0
# only use the external one close to the herbs, so the other one can be kept for ha
#   - 1
#  batt_entities: True
# whitelist:
#   # white ones
#   - '80:EA:CA:89:5F:D3'
#   - '80:EA:CA:89:63:04'
#   - '80:EA:CA:89:68:44'
#   - 'c4:7c:8d:6b:a5:1f'
#   # green ones
#   - '80:ea:ca:89:52:75'
#   - '80:ea:ca:89:56:bd'
#  mac: '80:EA:CA:89:5F:D3'
#  monitored_conditions:
#    - moisture
#    - light
#    - temperature
#    - conductivity
#    - battery
#- platform: mitemp_bt
#  mac: '80:EA:CA:89:63:04'
#  monitored_conditions:
#    - moisture
#    - light
#    - temperature
#    - conductivity
#    - battery
#- platform: mitemp_bt
#  mac: '80:EA:CA:89:68:44'
#  monitored_conditions:
#    - moisture
#    - light
#    - temperature
#    - conductivity
#    - battery

# thomasvs: miflora sensors
# https://www.home-assistant.io/integrations/miflora/
# FIXME: thomasvs: deprecated in 2022.8.0
# - platform: miflora
#   mac: '80:ea:ca:89:52:75'
#   name: Parsley
#   force_update: true
#   go_unavailable_timeout: 43200
#   monitored_conditions:
#     - moisture
#     - light
#     - temperature
#     - conductivity
#     - battery
# - platform: miflora
#   mac: '80:ea:ca:89:56:bd'
#   name: Rosemary
#   force_update: true
#   go_unavailable_timeout: 43200
#   monitored_conditions:
#     - moisture
#     - light
#     - temperature
#     - conductivity
#     - battery
# - platform: miflora
#   name: herb3
#   mac: '80:EA:CA:89:5F:D3'
#   monitored_conditions:
#     - moisture
#     - light
#     - temperature
#     - conductivity
#     - battery
# - platform: miflora
#   name: herb4
#   mac: '80:EA:CA:89:63:04'
#   monitored_conditions:
#     - moisture
#     - light
#     - temperature
#     - conductivity
#     - battery
# - platform: miflora
#   name: herb5
#   mac: '80:EA:CA:89:68:44'
#   monitored_conditions:
#     - moisture
#     - light
#     - temperature
#     - conductivity
#     - battery


# thomas: average humidity sensor for non-wet rooms
- platform: template
  sensors:
    average_dry_humidity:
      friendly_name: 'Average Dry Humidity'
      unit_of_measurement: '%'
      value_template: >-
        {% set ns = namespace(count=0,sum=0.0) %}
        {% set sensors = ['kitchen', 'guest_bedroom'] %}
        {% for s in sensors %}
          {% set id = 'sensor.sensor_' + s + '_humidity' %}
          {% if states(id) != 'unavailable' %}
            {% set ns.count = ns.count + 1 %}
            {% set ns.sum = ns.sum + float(states(id)) %}
          {% endif %}
        {% endfor %}
        {{ '%0.1f'|format(ns.sum / ns.count) }}
